# cache:
#   key: ${CI_COMMIT_REF_SLUG}
# prefix: ${CI_JOB_NAME}
# files:
#   - poetry.lock
#   - .gitlab-ci.yml
# paths:
#   - .venv
#   - .cache/pip
#   - echo `poetry env info --path`
#   - .poetry

stages:
  # - check
  - lint
  - types
  # - test
  - build
  #   - deploy
  #   - docs

.before_script_template:
  before_script:
    - python -V
    - rm -rf poetry.toml
    - pip install --upgrade pip
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
    # - pip install poetry==1.1.13
    - source $HOME/.poetry/env
    - poetry --version
    - poetry config virtualenvs.in-project true
    - poetry install -vv
    - source `poetry env info --path`/bin/activate

python_code_lint:
  stage: lint
  image: python:3.8-buster
  extends: .before_script_template
  script:
    - poetry run black .

static_type_check:
  stage: types
  image: python:3.8-buster
  extends: .before_script_template
  script:
    - poetry run flake8 .
# test:core:
#   stage: test
#   image: "python:3.8-slim-buster"
#   variables:
#     PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
#     PYTHONPATH: $PWD
#   before_script:
#     - pip install -U pip
#     - pip install pytest
#     - pip install -r requirements.txt
#   script:
#     - pytest ./tests

image:backend:
  stage: build
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  variables:
    # DOCKER_DRIVER: overlay2
    # DOCKER_TLS_CERTDIR: ""
    IMAGE_NAME: backend
    # DOCKER_HOST: tcp://docker:2375
    # PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
  before_script:
    - echo "$DOCKER_REGISTRY_PASS" | docker login -u $PUBLISH_TOKEN_NAME -p $PUBLISH_TOKEN gitlab-registry.com
  script:
    - docker build -t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_REF_SLUG -f ./Docker/app.dockerfile .
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_REF_SLUG
  only:
    - tags
  # rules:
  #   - if: $CI_COMMIT_TAG != null && $CI_COMMIT_BRANCH == "main"

image:celery:
  stage: build
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  variables:
    # DOCKER_DRIVER: overlay2
    # DOCKER_TLS_CERTDIR: ""
    IMAGE_NAME: celery
    # DOCKER_HOST: tcp://docker:2375
    # PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
  before_script:
    - echo "$DOCKER_REGISTRY_PASS" | docker login -u $PUBLISH_TOKEN_NAME -p $PUBLISH_TOKEN gitlab-registry.com
  script:
    - docker build -t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_REF_SLUG -f ./Docker/celery.dockerfile .
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_REF_SLUG
  only:
    - tags
  # rules:
  #   - if: $CI_COMMIT_TAG != null && $CI_COMMIT_BRANCH == "main"

image:db:
  stage: build
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  variables:
    # DOCKER_DRIVER: overlay2
    # DOCKER_TLS_CERTDIR: ""
    IMAGE_NAME: db
    # DOCKER_HOST: tcp://docker:2375
    # PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
  before_script:
    - echo "$DOCKER_REGISTRY_PASS" | docker login -u $PUBLISH_TOKEN_NAME -p $PUBLISH_TOKEN gitlab-registry.com
  script:
    - docker build -t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_REF_SLUG -f ./Docker/db.dockerfile .
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_REF_SLUG
  only:
    - tags
    # rules:
  #   - if: $CI_COMMIT_TAG != null && $CI_COMMIT_BRANCH == "main"
